"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Input } from "@/components/ui/input"
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination"
import {
  Heart,
  MessageCircle,
  Share2,
  Flag,
  Edit,
  Trash2,
  Plus,
  Pin,
  Clock,
  Eye,
  MoreHorizontal,
  Filter,
  TrendingUp,
  Star,
  ImageIcon,
  HelpCircle,
  Loader2,
} from "lucide-react"
import type { UserRole, ActiveSection } from "./community-platform"
import { PostDetail } from "@/components/post-detail"
import { usePosts, useToggleLike, useIncrementViews } from "@/hooks/use-posts"
import { PostFilters } from "@/lib/types"

interface MainContentProps {
  userRole: UserRole
  activeSection: ActiveSection
  selectedPostId: number | null
  setSelectedPostId: (id: number | null) => void
}

const categories = [
  { name: "GPU", color: "bg-red-500", textColor: "text-red-400" },
  { name: "CPU", color: "bg-blue-500", textColor: "text-blue-400" },
  { name: "Monitor", color: "bg-green-500", textColor: "text-green-400" },
  { name: "Gaming Chair", color: "bg-purple-500", textColor: "text-purple-400" },
  { name: "Keyboard", color: "bg-yellow-500", textColor: "text-yellow-400" },
  { name: "Mouse", color: "bg-pink-500", textColor: "text-pink-400" },
]

// 하드코딩된 posts 배열 제거 - 이제 API에서 가져옴

const sectionContent: Record<Exclude<ActiveSection, 'admin'>, { title: string; icon: any }> = {
  forum: { title: "Latest Discussions", icon: MessageCircle },
  gallery: { title: "Hardware Gallery", icon: ImageIcon },
  reviews: { title: "Product Reviews", icon: Star },
  qa: { title: "Questions & Answers", icon: HelpCircle },
  rankings: { title: "Hardware Rankings", icon: TrendingUp },
}

export function MainContent({ userRole, activeSection, selectedPostId, setSelectedPostId }: MainContentProps) {
  const [likedPosts, setLikedPosts] = useState<number[]>([])
  const [filterCategory, setFilterCategory] = useState<string>("all")
  const [searchQuery, setSearchQuery] = useState<string>("")
  const [currentPage, setCurrentPage] = useState(1)
  const [postsPerPage] = useState(5)

  // API 필터 설정
  const filters: PostFilters = {
    category: filterCategory === "all" ? undefined : filterCategory,
    search: searchQuery || undefined,
    page: currentPage,
    limit: postsPerPage,
    sortBy: "latest"
  }

  // API 호출
  const { data: postsResponse, isLoading, error } = usePosts(filters)
  const toggleLikeMutation = useToggleLike()
  const incrementViewsMutation = useIncrementViews()

  if (selectedPostId) {
    return <PostDetail userRole={userRole} postId={selectedPostId} onBack={() => setSelectedPostId(null)} />
  }

  const handleLike = async (postId: number) => {
    if (userRole === "guest") return
    
    try {
      await toggleLikeMutation.mutateAsync(postId)
      // 로컬 상태도 업데이트
      setLikedPosts((prev) => (prev.includes(postId) ? prev.filter((id) => id !== postId) : [...prev, postId]))
    } catch (error) {
      console.error('Failed to toggle like:', error)
    }
  }

  const handlePostClick = async (postId: number) => {
    // 조회수 증가
    try {
      await incrementViewsMutation.mutateAsync(postId)
    } catch (error) {
      console.error('Failed to increment views:', error)
    }
    setSelectedPostId(postId)
  }

  const posts = postsResponse?.data || []
  const totalPages = postsResponse?.pagination?.totalPages || 1

  const currentSection = activeSection === 'admin' ? sectionContent.forum : sectionContent[activeSection]

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 border-b border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex items-center justify-between">
            <div>
              <div className="flex items-center gap-3 mb-2">
                <currentSection.icon className="w-8 h-8 text-blue-400" />
                <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-400 to-red-400 bg-clip-text text-transparent">
                  {currentSection.title}
                </h1>
              </div>
              <p className="text-gray-400">
                {activeSection === "forum" && "Join the conversation about PC hardware"}
                {activeSection === "gallery" && "Showcase your builds and setups"}
                {activeSection === "reviews" && "In-depth hardware reviews and comparisons"}
                {activeSection === "qa" && "Get help from the community"}
                {activeSection === "rankings" && "Top-rated hardware and builds"}
              </p>
            </div>
            {userRole !== "guest" && (
              <Button className="bg-gradient-to-r from-blue-600 to-red-600 hover:from-blue-700 hover:to-red-700">
                <Plus className="w-4 h-4 mr-2" />
                Create {activeSection === "forum" ? "Post" : activeSection === "gallery" ? "Gallery" : "Review"}
              </Button>
            )}
          </div>
        </div>
      </div>

      {/* Filters and Categories */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between mb-6">
          <div className="flex flex-wrap gap-2">
            <Button
              variant={filterCategory === "all" ? "default" : "outline"}
              size="sm"
              onClick={() => {
                setFilterCategory("all")
                setCurrentPage(1)
              }}
              className={
                filterCategory === "all"
                  ? "bg-blue-600 hover:bg-blue-700"
                  : "border-gray-600 text-gray-300 hover:border-blue-500 hover:text-blue-400 bg-transparent"
              }
            >
              All Categories
            </Button>
            {categories.map((category) => (
              <Button
                key={category.name}
                variant={filterCategory === category.name ? "default" : "outline"}
                size="sm"
                onClick={() => {
                  setFilterCategory(category.name)
                  setCurrentPage(1)
                }}
                className={
                  filterCategory === category.name
                    ? `${category.color} hover:opacity-80`
                    : "border-gray-600 text-gray-300 hover:border-gray-500 hover:text-gray-200 bg-transparent"
                }
              >
                {category.name}
              </Button>
            ))}
          </div>

          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" className="border-gray-600 text-gray-300 bg-transparent">
              <Filter className="w-4 h-4 mr-2" />
              Filter
            </Button>
            <Input
              placeholder="Search posts..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-64 bg-gray-800 border-gray-700 text-gray-100 placeholder-gray-400"
            />
          </div>
        </div>

        {/* Posts Grid */}
        <div className="space-y-4">
          {isLoading ? (
            <div className="flex justify-center items-center py-8">
              <Loader2 className="w-8 h-8 animate-spin text-blue-400" />
            </div>
          ) : error ? (
            <div className="text-center py-8 text-red-400">
              Failed to load posts. Please try again.
            </div>
          ) : posts.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              No posts found.
            </div>
          ) : (
            posts.map((post: any) => {
            const categoryInfo = categories.find((cat) => cat.name === post.category)
            return (
              <Card
                key={post.id}
                className="bg-gray-800 border-gray-700 hover:border-gray-600 transition-all duration-200 hover:shadow-lg hover:shadow-blue-500/10"
              >
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <Avatar className="w-12 h-12">
                        <AvatarImage src={post.avatar || "/placeholder.svg"} />
                        <AvatarFallback className="bg-gradient-to-r from-blue-500 to-red-500 text-white">
                          {post.author[0]}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <div className="flex items-center gap-2">
                          <h3 className="font-semibold text-gray-100">{post.author}</h3>
                          {post.isPinned && <Pin className="w-4 h-4 text-yellow-400" />}
                          {activeSection === "reviews" && (
                            <div className="flex items-center gap-1">
                              <Star className="w-4 h-4 text-yellow-400 fill-current" />
                              <span className="text-sm text-yellow-400">{post.rating}</span>
                            </div>
                          )}
                        </div>
                        <div className="flex items-center gap-2 text-sm text-gray-400">
                          <Clock className="w-3 h-3" />
                          <span>{post.timeAgo}</span>
                          <span>•</span>
                          <Badge className={`${categoryInfo?.color} text-white border-0`}>{post.category}</Badge>
                        </div>
                      </div>
                    </div>
                    {userRole !== "guest" && (
                      <Button variant="ghost" size="sm" className="text-gray-400 hover:text-gray-200">
                        <MoreHorizontal className="w-4 h-4" />
                      </Button>
                    )}
                  </div>
                </CardHeader>

                <CardContent className="space-y-4">
                  <div>
                    <h2
                      onClick={() => handlePostClick(post.id)}
                      className="text-xl font-semibold text-gray-100 mb-3 hover:text-blue-400 cursor-pointer transition-colors"
                    >
                      {post.title}
                    </h2>
                    <p className="text-gray-300 line-clamp-2 leading-relaxed">{post.content}</p>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {post.tags.map((tag) => (
                      <Badge
                        key={tag}
                        variant="secondary"
                        className="bg-gray-700 text-gray-300 hover:bg-gray-600 cursor-pointer transition-colors"
                      >
                        #{tag}
                      </Badge>
                    ))}
                  </div>

                  <div className="flex items-center justify-between pt-4 border-t border-gray-700">
                    <div className="flex items-center gap-6">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleLike(post.id)}
                        className={`gap-2 transition-colors ${
                          likedPosts.includes(post.id)
                            ? "text-red-400 hover:text-red-300"
                            : "text-gray-400 hover:text-red-400"
                        } ${userRole === "guest" ? "cursor-default" : ""}`}
                        disabled={userRole === "guest"}
                      >
                        <Heart className={`w-5 h-5 ${likedPosts.includes(post.id) ? "fill-current" : ""}`} />
                        <span className="font-medium">{post.likes + (likedPosts.includes(post.id) ? 1 : 0)}</span>
                      </Button>

                      <Button
                        variant="ghost"
                        size="sm"
                        className="gap-2 text-gray-400 hover:text-blue-400 transition-colors"
                      >
                        <MessageCircle className="w-5 h-5" />
                        <span className="font-medium">{post.comments}</span>
                      </Button>

                      <div className="flex items-center gap-2 text-gray-400">
                        <Eye className="w-4 h-4" />
                        <span className="text-sm font-medium">{post.views.toLocaleString()}</span>
                      </div>
                    </div>

                    <div className="flex items-center gap-2">
                      {userRole !== "guest" && (
                        <>
                          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-blue-400">
                            <Share2 className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-yellow-400">
                            <Flag className="w-4 h-4" />
                          </Button>
                        </>
                      )}

                      {(userRole === "admin" || (userRole === "member" && post.author === "Current User")) && (
                        <>
                          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-green-400">
                            <Edit className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-red-400">
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>

        {/* Pagination */}
        {totalPages > 1 && (
          <div className="flex justify-center mt-8">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                    className={
                      currentPage === 1
                        ? "pointer-events-none opacity-50"
                        : "cursor-pointer text-gray-300 hover:text-white"
                    }
                  />
                </PaginationItem>

                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                  <PaginationItem key={page}>
                    <PaginationLink
                      onClick={() => setCurrentPage(page)}
                      isActive={currentPage === page}
                      className="cursor-pointer text-gray-300 hover:text-white"
                    >
                      {page}
                    </PaginationLink>
                  </PaginationItem>
                ))}

                <PaginationItem>
                  <PaginationNext
                    onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                    className={
                      currentPage === totalPages
                        ? "pointer-events-none opacity-50"
                        : "cursor-pointer text-gray-300 hover:text-white"
                    }
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </div>
        )}
      </div>

      {/* Floating Action Button */}
      {userRole !== "guest" && (
        <div className="fixed bottom-8 right-8">
          <Button
            size="lg"
            className="rounded-full w-16 h-16 bg-gradient-to-r from-blue-600 to-red-600 hover:from-blue-700 hover:to-red-700 shadow-2xl hover:shadow-blue-500/25 transition-all duration-200"
          >
            <Plus className="w-8 h-8" />
          </Button>
        </div>
      )}
    </div>
  )
}
